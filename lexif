#!/usr/bin/env luajit
-- luapacked using 0.4.3
local e=arg package.preload["__luapack_entry__"]=function(...)local t=require'getopt'local a=require'lim'local o=a.path(arg[0])local i='0.1'local function n(y)local p=''if next(y)then p=a.catlist(y)else p='.'end local v=a.strf("find %s -path ./.git -prune -o -type f \\( -name '*.jpg' -o -name '*.png' -o -name '*.tif' \\) -print",p)local b=a.cmd(v)return b end local function s(y)local p=''if next(y)then p='exiftool '..a.catlist(y)else p='exiftool .'end a.printl(a.cmd(p))end local function h(y)local p=''if#y==0 then print('-> search_info: No Keyword!')return end if#y==1 then local v=assert(io.popen("find . -type f -name '*.jpg'"))for b in v:lines()do p='exiftool '..b..' | grep -i '..y[1]local g=a.cmd(p)if g and g:match("^%s*$")==nil then print('==>',b)print(g)end end else p='exiftool '..y[2]..' | grep -i '..y[1]local v=a.cmd(p)print(v)end end local function r(y)local p='exiftool -s -s -s -ImageDescription'local v='.'if next(y)then v=a.catlist(y)end local b=a.strf("%s %s",p,v)local g=a.cmd(b)return g end local function d(y)a.printl(r(y))end local function l(y)if not y then return false end local p=r({y})a.printf("%s: %s\n",y,a.catlist(p))local v=a.read('ImageDescription: ')local b=a.strf("exiftool -overwrite_original -ImageDescription='%s' %s",v,y)a.printl(a.cmd(b))end local function u(y)if#y==0 then local p=n(y)for v in a.iterlist(p)do l(v)end elseif#y==1 then if a.isdir(y[1])then path=y[1]local p=a.lfs(path)for v,b in ipairs(p)do l(b)end elseif a.isfile(y[1])then print(y[1],'is file!')l(y[1])else print('--> optargs is wrong!')os.exit(1)end else for p in a.each(y)do l(p)end end end local function c(y)local p=''if next(y)then p=string.format('exiftool -csv -r %s > metadata.csv',a.catlist(y))else p='exiftool -csv -r . > metadata.csv'end print('-> create_metacsv:',p)local v=a.cmd(p)if v then print("--> create_metacsv(): metadata.csv created!")end end local function m()local y={"----------------------------------------",a.strf("%s v%s Brosu",o.name,i),"----------------------------------------",a.strf("Usage: %s <option> <files>",o.name),"  -h: help","  -f <path>   list image files","  -l <files>  list exif info","  -i <files>  show ImageDescription info","  -I <files>  edit ImageDescription info","  -s <keyword> <files>  search exif info","  -m {img_dir} create metadata.csv from img_dir"}a.printl(y)end local f=arg[1]local w={select(2,unpack(arg))}if f=='-l'then s(w)elseif f=='-s'then h(w)elseif f=='-f'then local y=n(w)a.printl(y)elseif f=='-i'then d(w)elseif f=='-I'then u(w)elseif f=='-m'then c(w[1])else m()end end package.loaded["__luapack_entry__"]=nil package.preload["lim"]=function(...)local t=e local a={}a.hostname=os.getenv('HOSTNAME')a.user=os.getenv('USER')a.home=os.getenv('HOME')a.path=os.getenv('PATH')a.term=os.getenv('TERM')a.luapath=os.getenv('LUA_PATH')a.luacpath=os.getenv('LUA_CPATH')function a.read(o)o=o or'Input: 'io.write(o)io.flush()local i=io.read()return i end function a.cmd(o)if not o then return end local i={}local n=assert(io.popen(o))for s in n:lines()do table.insert(i,s)end n:close()return i end function a.path(o)local i={}i.dirname=o:match("(.*/)")if i.dirname==nil then i.dirname=""end i.filename=o:match("([^/]+)$")i.name,i.ext=i.filename:match("(.+)%.(.+)")if i.name==nil then i.name=i.filename i.ext=""end return i end function a.isfile(o)local i,n,s=os.rename(o,o)if not i then if s==13 then return true end end return i,n end function a.isdir(o)return a.isfile(o.."/")end function a.lsf(o,i)o=o or'.'local n if i then n=string.format("find %s -type f -name '%s'",o,i)else n=string.format("find %s -type f",o)end local s={}local h=assert(io.popen(n))for r in h:lines()do table.insert(s,r)end return s end function a.lsd(o,i)o=o or'.'local n if i then n=string.format("find %s -type d -name '%s'",o,i)else n=string.format("find %s -type f",o)end local s={}local h,r=io.popen(n)for d in h:lines()do table.insert(s,d)end return s end function a.which(o)local i=io.popen('which '..o)local n=i:read("*a")i:close()if n==''then return nil else return n end end function a.iterlines(o)local i,n=io.open(o,'r')if not i then print('iterline():err:',n)return end return function()local s=i:read("*line")if not s then i:close()return nil end return s end end a.ilines=a.iterlines function a.fgrep(o,i)local n,s=io.open(o,'r')if not n then print('Error:',s)return end for h in n:lines()do if string.find(string.lower(h),i)then print(h)end end n:close()end function a.csv(o,i)i=i or','local n={}local s={}local h,r=io.open(o,'r')if not h then print('Error:',r)return end local d=0 for l in h:lines()do d=d+1 if d==1 then for u in string.gmatch(l,"([^"..i.."]+)")do table.insert(n,u)end else local u={}for c in string.gmatch(l,"([^"..i.."]+)")do table.insert(u,c)end table.insert(s,u)end end return s,n end function a.printf(...)local function o(...)io.write(string.format(...))end local i,n=pcall(o,...)if not i then error(n,2)end end function a.printl(o)if next(o)then for i,n in ipairs(o)do print(n)end end end a.strf=string.format function a.ipattern(o)local i=''for n in o:gmatch'.'do i=i..'['..n:lower()..n:upper()..']'end return i end function a.split(o,i)if i==nil then i="%s"end local n={}for h in string.gmatch(o,"([^"..i.."]+)")do table.insert(n,h)end return n end function a.catlist(o,i)i=i or' 'if next(o)then return table.concat(o,i)else return nil end end a.catl=a.catlist function a.iterlist(o)local n=0 return function()n=n+1 return o[n]end end a.each=a.iterlist function a.isint(o)local i=tonumber(o)if i and i%1 ==0 then return true end end function a.isnum(o)if tonumber(o)then return true end end function a.stoi(o)if not o then print('--> toints: str is nil')return end if type(o)=='number'then if o and o%1 ==0 then return o, ("--> stoi: ok: type=number: integer")else return false, ("--> stoi: err: type=number: not integer"..o)end elseif type(o)=='string'then local i=tonumber(o)if i and i%1 ==0 then return i, ("--> stoi: ok: type=string: integer")else return false, ("--> stoi: err: type=string: not integer: "..o)end end return false, ("--> stoi: err: str is not string or string table.")end function a.argstoi(o)if not o then print('--> argstoi: args is nil')return false end local i={}if type(o)=='table'and next(o)then for n,h in pairs(o)do local s=tonumber(h)if s and s%1 ==0 then table.insert(i,s)else return false, ("--> stoi: err: type=table: not integer")end end return i, ("--> stoi: ok: type=table; integers")end return false, ("--> stoi: err: str is not string or string table.")end function a.time2date(o,i)i=i or'%F'return os.date(i,o)end return a end package.loaded["lim"]=nil package.preload["getopt"]=function(...)local t=e local function a(o,i,n)local s=1 local h=2 n=n or{}return function()while true do local t=o[s]if t==nil then return nil elseif t=='--'then for r=s+1,#o do table.insert(n,o[r])end return nil elseif t:sub(1,1)=='-'then local r=t:sub(h,h)local d,l=i:find(r..':?')if not d then s=s+1 h=2 return'?',r elseif l>d and#t>h then local u=t:sub(h+1)s=s+1 h=2 return r,u elseif l>d then local u=o[s+1]s=s+2 h=2 if u==nil then return':',r end return r,u else h=h+1 if h>#t then s=s+1 h=2 end return r,nil end else s=s+1 table.insert(n,t)end end end end return a end package.loaded["getopt"]=nil do local t=package.preload["__luapack_entry__"](...)return t end